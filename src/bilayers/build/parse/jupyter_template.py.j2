from ipywidgets import widgets, VBox, HBox, Tab, Accordion
from IPython.display import display
from typing import Any, Optional, Union
import os, tempfile

{% autoescape false %}
inputs = {{inputs}}
outputs = {{outputs}}
parameters = {{parameters}}
display_only = {{display_only}}
exec_function = {{exec_function}}

{% endautoescape %}

beginner_widgets = []
advanced_widgets = []

param_vars = {}

# Appending args in cli_command
cli_command_base = exec_function.get('cli_command', "")

radio_options = {

    {% if parameters -%}
    {% for key, param_conf in parameters.items() if param_conf.get('type') in ['radio', 'dropdown'] -%}
        "{{ key | lower | replace(' ', '_') }}": {
            {% for option in param_conf.get('options', []) -%}
            "{{ option.get('label', '') }}": "{{ option.get('value', '') }}"{% if not loop.last %}, {% endif %}
            {%- endfor %}
        },
    {%- endfor %}
    {%- endif %}
    {% if display_only -%}
    {% for key, display_only_conf in display_only.items() if display_only_conf.get('type') in ['radio', 'dropdown'] -%}
        "{{ key | lower | replace(' ', '_') }}": {
            {% for option in display_only_conf.get('options', []) %}
            "{{ option.get('label', '') }}": "{{ option.get('value', '') }}"{% if not loop.last %}, {% endif %}
            {%- endfor %}
        },
    {%- endfor %}
    {%- endif %}
    }

{##########################}
{# Parsing inputs section #}
{##########################}
{% if inputs -%}
{% for key, input_conf in inputs.items() -%}

{% set input_label = key | lower | replace(" ", "_") %}

{% if input_conf.get('type') in ['image', 'measurement', 'array', 'file', 'executable'] %}
mount_path = "{{ input_conf.get('folder_name', '/bilayers/input_images') }}"
upload_temp_dir = tempfile.mkdtemp(prefix="jupyter_upload_")

# Check if mount folder exists and has files
if os.path.exists(mount_path) and any(os.scandir(mount_path)):
    # If mounted, display info and disable upload
    {{ input_label }} = widgets.HTML(
        value=(
            f"<div style='padding:8px; background:#eaffea; border-radius:6px;'>"
            f"<b>Using Mounted Directory:</b> <code>{mount_path}</code><br>"
            f"<i>File upload is disabled for this input.</i>"
            f"</div>"
        )
    )
    current_input_dir = mount_path
    is_mounted = True
else:
    # Otherwise, enable the FileUpload widget
    {{ input_label }} = widgets.FileUpload(multiple=True, description="Upload Files")
    current_input_dir = upload_temp_dir
    is_mounted = False
{%- endif %}

# Add a description label
{{ "desc_" + input_label }}  = widgets.HTML(value = "<b>{{ input_conf.get('label', '') }} </b> :  {{ input_conf.get('description', '') }}")

# Add widget and description to accordion
tab = Tab(children=[HBox([widgets.Label("{{ input_conf.get('label', '') }}"), {{ input_label }}]), {{ "desc_" + input_label }}])
tab.set_title(0, "{{ input_conf.get('label', '') }}")
tab.set_title(1, "Description")

# Append the corresponding cli_tag, widget to param_vars
{% if input_conf.get('type') in ['image', 'measurement', 'array', 'file', 'executable'] %}
param_vars["{{ input_label }}"] = {
    "cli_tag": "{{ input_conf.get('cli_tag') }}",
    "widget": {{ input_label }} if not is_mounted else widgets.Label(value=f"Mounted: {mount_path}"),
    "cli_order": {{ input_conf.get('cli_order', 0) }},
    "folder_name": current_input_dir,
    "optional": {{ input_conf.get('optional', False) }},
    "is_mounted": is_mounted
}
{# param_vars.append(("{{ input_conf.get('cli_tag') }}", {{ input_label }}, {{ input_conf.get('cli_order', 0) }}, "{{ input_conf.get('folder_name', '') }}")) #}
{%- endif %}

{% if input_conf.get('mode') == 'beginner' -%}
beginner_widgets.append(tab)
{% else %}
advanced_widgets.append(tab)
{%- endif %}

{%- endfor %}
{%- endif %}

{##############################}
{# Parsing parameters section #}
{##############################}
{% if parameters -%}
{% for key, param_conf in parameters.items() -%}

{% set param_label = key | lower | replace(" ", "_") %}

{% if param_conf.get('type') == 'radio' %}
{{ param_label }} = widgets.RadioButtons(options=[{% for option in param_conf.get('options', []) %}("{{ option.label }}", "{{ option.value }}"){% if not loop.last %}, {% endif %}{% endfor %}], value="{{ param_conf.get('default', '') }}")
{% elif param_conf.get('type') == 'dropdown' %}
{{ param_label }} = widgets.Dropdown(options=[{% for option in param_conf.get('options', []) %}("{{ option.label }}", "{{ option.value }}"){% if not loop.last %}, {% endif %}{% endfor %}], value="{{ param_conf.get('default', '') }}", multiselect = {{ param_conf.get('multiselect', False) }})
{% elif param_conf.get('type') in ['integer', 'float'] %}
{% if param_conf.get('type') == 'integer' %}
{{ param_label }} = widgets.IntText(value={{ param_conf.get('default', 0) }})
{% else %} 
{{ param_label }} = widgets.FloatText(value={{param_conf.get('default', 0.0)}})
{% endif %}
{% elif param_conf.get('type') == 'textbox' %}
{{ param_label }} = widgets.Textarea(value="{{ param_conf.get('default', '') }}")
{% elif param_conf.get('type') == 'checkbox' %}
{{ param_label }} = widgets.Checkbox(value={{ param_conf.get('default', False) }})
{%- endif %}

# Add a description label
{{ "desc_" + param_label }}  = widgets.HTML(value = "<b>{{ param_conf.get('label', '') }} </b> :  {{ param_conf.get('description', '') }}")

# Add widget and description to accordion
tab = Tab(children=[HBox([widgets.Label("{{ param_conf.get('label', '') }}"), {{ param_label }}]), {{ "desc_" + param_label }}])
tab.set_title(0, "{{ param_conf.get('label', '') }}")
tab.set_title(1, "Description")

# Append the corresponding cli_tag, widget to param_vars
{% if param_conf.get('type') == 'checkbox' %}
{# param_vars.append(("{{ param_conf.get('cli_tag') }}", {{ param_label }}, {{ param_conf.get('cli_order', 0) }}, {{ param_conf.get('append_value', False) }} )) #}
param_vars["{{ param_label }}"] = {
    "cli_tag": "{{ param_conf.get('cli_tag') }}",
    "widget": {{ param_label }},
    "cli_order": {{ param_conf.get('cli_order', 0) }},
    "optional": {{ param_conf.get('optional', False) }},
    "append_value": {{ param_conf.get('append_value', False) }}
}
{% else %}
param_vars["{{ param_label }}"] = {
    "cli_tag": "{{ param_conf.get('cli_tag') }}",
    "widget": {{ param_label }},
    "cli_order": {{ param_conf.get('cli_order', 0) }},
    "optional": {{ param_conf.get('optional', False) }}
}
{# param_vars.append(("{{ param_conf.get('cli_tag') }}", {{ param_label }}, {{ param_conf.get('cli_order', 0) }} )) #}
{% endif %}

{% if param_conf.get('mode') == 'beginner' -%}
beginner_widgets.append(tab)
{% else %}
advanced_widgets.append(tab)
{%- endif %}
{%- endfor %}
{%- endif %}

{################################}
{# Parsing display_only section #}
{################################}
{% if display_only -%}
{% for key, display_only_conf in display_only.items() -%}

{% set display_only_label = key | lower | replace(" ", "_") %}

{% if display_only_conf.get('type') == 'radio' %}
{{ display_only_label }} = widgets.RadioButtons(options=[{% for option in display_only_conf.get('options', []) %}("{{ option.label }}", "{{ option.value }}"){% if not loop.last %}, {% endif %}{% endfor %}], value="{{ display_only_conf.get('default', '') }}", disabled=True)
{% elif display_only_conf.get('type') == 'dropdown' %}
{{ display_only_label }} = widgets.Dropdown(options=[{% for option in display_only_conf.get('options', []) %}("{{ option.label }}", "{{ option.value }}"){% if not loop.last %}, {% endif %}{% endfor %}], value="{{ display_only_conf.get('default', '') }}", multiselect="{{ display_only_conf.get('multiselect', False) }}", disabled=True)
{% elif display_only_conf.get('type') in ['integer', 'float'] %}
{% if display_only_conf.get('type') == 'integer' %}
{{ display_only_label }} = widgets.IntText(value={{ display_only_conf.get('default', 0) }}, disabled=True)
{% else %}
{{ display_only_label }} = widgets.FloatText(value={{ display_only_conf.get('default', 0.0) }}, disabled=True)
{% endif %}
{% elif display_only_conf.get('type') == 'textbox' %}
{{ display_only_label }} = widgets.Textarea(value="{{ display_only_conf.get('default', '') }}", disabled=True)
{% elif display_only_conf.get('type') == 'checkbox' %}
{{ display_only_label }} = widgets.Checkbox(value={{ display_only_conf.get('default', False) }}, disabled=True)
{%- endif %}


# Add a description label
{{ "desc_" + display_only_label }}  = widgets.HTML(value = "<b>{{ display_only_conf.get('label', '') }} </b> :  {{ display_only_conf.get('description', '') }}")

# Add widget and description to accordion
tab = Tab(children=[HBox([widgets.Label("{{ display_only_conf.get('label', '') }}"), {{ display_only_label }}]), {{ "desc_" + display_only_label }}])
tab.set_title(0, "{{ display_only_conf.get('label', '') }}")
tab.set_title(1, "Description")

{% if display_only_conf.get('mode') == 'beginner' -%}
beginner_widgets.append(tab)
{% else %}
advanced_widgets.append(tab)
{%- endif %}

{%- endfor %}
{%- endif %}

acc = Accordion()
# Add beginner_widgets to the first section
acc.children = [VBox(beginner_widgets)]
acc.set_title(0, "Beginner's Section")
# Add advanced_widgets to the second section
acc.children = acc.children + (VBox(advanced_widgets),)
acc.set_title(1, "Advanced Section")

def option_to_append(cli_tag: str, value: Any) -> Optional[str]:
    """
    Formats CLI options for appending to the command.

    Args:
        cli_tag (str): CLI tag (e.g., "--option").
        value (Any): The value to append.

    Returns:
        Optional[str]: The formatted CLI option or None if ignored.
    """
    if cli_tag == "None":
        return None # Ignore the cli_tag and value pair
    elif cli_tag == "":
        return str(value)  # Append only the value
    else:
        if "=" in cli_tag:
            return f"{cli_tag}{value}"  # Append cli_tag and value with "="
        return f"{cli_tag} {value}"  # Append cli_tag and value

def insert_into_jagged_array(
    jagged_array: list[Optional[list[str]]], 
    cli_order: int, 
    cli_tag: str, 
    value: Any
    ) -> None:
    """
    Inserts CLI arguments into a structured array to maintain ordering.

    Args:
        jagged_array (list[Optional[list[str]]]): The structured array for CLI options.
        cli_order (int): The order in which arguments should appear.
        cli_tag (str): The CLI tag.
        value (Any): The value to append.
    """
    # Check the length of Jagged Array and dynamically append with None if required
    while len(jagged_array) <= abs(cli_order):
        jagged_array.append(None)

    # Initialize the sublist if it's not already
    jagged_array[abs(cli_order)] = jagged_array[abs(cli_order)] or []

    # Append the cli_tag and value to the appropriate sublist
    result = option_to_append(cli_tag, value)
    if result is not None: # Only append if the result is not None
        jagged_array[abs(cli_order)].append(result)

def validate_and_highlight(widget: widgets.Widget, value: Any, optional: bool) -> bool:
    """
    Validates whether the given widget's value is present for non-optional fields.
    If the value is missing (None, empty, or the string "None") for a mandatory field,
    it sets the widget's border to red to visually indicate an error.
    
    Args:
        widget (widgets.Widget): The widget to validate.
        value (Any): The value of the widget.
        optional (bool): Whether the field is optional.
    
    Returns:
        bool: True if the value is valid (or the field is optional), False otherwise.
    """
    if (value is None or value == "" or value == "None") and not optional:
        widget.layout.border = '2px solid red'
        return False
    else:
        widget.layout.border = ''
        return True

def handle_file_upload(change: Any) -> None:
    """
    Handles file upload events by saving uploaded files to disk
    and refreshing the CLI command.

    This ensures FileUpload widget data (stored in memory) is
    persisted to the temp or mounted folder before running CLI.

    See also:
    Resolves: https://github.com/bilayer-containers/bilayers/issues/118
    """
    widget = change["owner"]

    # Find which param this widget belongs to
    for key, param_info in param_vars.items():
        if param_info.get("widget") is widget:
            folder_name = param_info.get("folder_name", tempfile.mkdtemp(prefix="bilayers_upload_"))
            os.makedirs(folder_name, exist_ok=True)

            # ipywidgets v8: .value is a list of dicts
            for file_data in widget.value:
                file_name = file_data.get("name")
                file_content = file_data.get("content")
                if file_name and file_content:
                    save_path = os.path.join(folder_name, file_name)
                    with open(save_path, "wb") as f:
                        f.write(file_content)
                    print(f"Saved uploaded file: {save_path}!")

            # Update CLI after saving files
            cli_command.value = construct_cli_command()
            break

def construct_cli_command() -> str:
    """
    Constructs the CLI command dynamically based on selected widgets.

    Returns:
        str: The constructed CLI command string.
    """
    {# cli_command: str = "{{ exec_function.get('cli_command', '') }}" #}
    cli_command_parts = [ cli_command_base]

    # Initialize jagged arrays
    jagged_positive_array: list[Optional[list[str]]] = []
    jagged_negative_array: list[Optional[list[str]]] = []

    {% autoescape false %}
    hidden_args = {{ exec_function.get("hidden_args", {}) }}
    print("Hidden Args:", hidden_args)
    {% endautoescape %}

    if hidden_args:
        for hidden_arg in hidden_args.values(): # Iterating over dictionary values, not keys
            cli_tag = hidden_arg.get('cli_tag', '')
            cli_order = hidden_arg.get('cli_order', 0)
            value = hidden_arg.get('value', '')
            append_value = hidden_arg.get('append_value', False)

            if cli_order < 0:
                while len(jagged_negative_array) <= abs(cli_order):
                    jagged_negative_array.append(None)  # Append None to fill gaps

            while len(jagged_positive_array) <= cli_order:
                jagged_positive_array.append(None)  # Append None to fill gaps

            if isinstance(value, bool): # Special case for boolean values
                if append_value:
                    if cli_order < 0:
                        insert_into_jagged_array(jagged_negative_array, cli_order, cli_tag, value)
                    else:
                        insert_into_jagged_array(jagged_positive_array, cli_order, cli_tag, value)
                else:
                    if value:
                        if cli_order < 0:
                            jagged_negative_array[abs(cli_order)] = jagged_negative_array[abs(cli_order)] or []
                            # Usually, the whole pair is ignored if cli_tag is "None" but since, here we are appending only cli_tag and not value, we need to check for "None" value
                            # Same case are followed for param_vars below (In total, 4 places we are manually checking for "None" value)
                            if cli_tag != "None": # Ignore the cli_tag and value pair if cli_tag is "None"
                                jagged_negative_array[abs(cli_order)].append(cli_tag)
                        else:
                            jagged_positive_array[abs(cli_order)] = jagged_positive_array[abs(cli_order)] or []
                            if cli_tag != "None": # Ignore the cli_tag and value pair if cli_tag is "None"
                                jagged_positive_array[abs(cli_order)].append(cli_tag)

            else: # For all other types except boolean
                if cli_order < 0:
                    insert_into_jagged_array(jagged_negative_array, cli_order, cli_tag, value)
                else:
                    insert_into_jagged_array(jagged_positive_array, cli_order, cli_tag, value)

    for key, param_info in param_vars.items():
        cli_tag: str = param_info["cli_tag"]
        widget: Union[widgets.Widget, widgets.FileUpload, widgets.Checkbox] = param_info["widget"]
        cli_order: int = param_info["cli_order"]
        optional: bool = param_info["optional"]

        if "folder_name" in param_info or "append_value" in param_info: # Special case for 'File' type and checkbox
            # =====================================================
            # Case A: Folder-based input (image, file, etc.)
            # =====================================================
            if "folder_name" in param_info:
                folder_name = param_info["folder_name"]
                is_mounted = param_info.get("is_mounted", False)
                widget = param_info.get("widget")

                # ----------------------------------------------
                # Mounted folder: just use the existing path
                # ----------------------------------------------
                if is_mounted:
                    value = folder_name

                # ----------------------------------------------
                # Upload mode: persist uploaded files to temp dir
                # ----------------------------------------------
                elif isinstance(widget, widgets.FileUpload) and widget.value:
                    os.makedirs(folder_name, exist_ok=True)
                    for file_info in widget.value:
                        fname = file_info.get("name")
                        content = file_info.get("content")
                        if fname and content:
                            with open(os.path.join(folder_name, fname), "wb") as f:
                                f.write(content)
                    print(f"Uploaded files saved to: {folder_name}")
                    value = folder_name

                # If neither mount nor upload happened, skip safely
                else:
                    print(f"No input files found for {cli_tag}")
                    continue

                # Insert folder path into CLI args
                if cli_order < 0:
                    insert_into_jagged_array(jagged_negative_array, cli_order, cli_tag, value)
                else:
                    insert_into_jagged_array(jagged_positive_array, cli_order, cli_tag, value)
                continue  # Move to next param

            # =====================================================
            # Case B: Checkbox (append_value = True)
            # =====================================================
            elif isinstance(widget, widgets.Checkbox):  # This is a 'Checkbox' type
                append_value: bool = param_info.get("append_value", False)
                value = widget.value
                # For checkboxes, the value is always either True or False, so the optional check isn’t needed since a value is always present
                if append_value: # If value needs to appended along with cli_tag - Special case for Checkbox
                    if cli_order < 0:
                        insert_into_jagged_array(jagged_negative_array, cli_order, cli_tag, value)
                    else:
                        insert_into_jagged_array(jagged_positive_array, cli_order, cli_tag, value)
                else: # Otherwise, just append the cli_tag - iff value is True
                    if value:
                        if cli_order < 0:
                            while len(jagged_negative_array) <= abs(cli_order):
                                jagged_negative_array.append(None)
                            jagged_negative_array[abs(cli_order)] = jagged_negative_array[abs(cli_order)] or []
                            if cli_tag != "None":
                                jagged_negative_array[abs(cli_order)].append(cli_tag)
                        else:
                            while len(jagged_positive_array) <= abs(cli_order):
                                jagged_positive_array.append(None)
                            jagged_positive_array[abs(cli_order)] = jagged_positive_array[abs(cli_order)] or []
                            if cli_tag != "None":
                                jagged_positive_array[abs(cli_order)].append(cli_tag)

        else:  # Handling other types then Files and Checkbox
            if isinstance(widget, widgets.RadioButtons):
                value = widget.value
                # If the user selected "ignore", convert it to None so that the flag is omitted.
                if value == "ignore":
                    value = None
                # Validate and highlight the widget if needed
                validate_and_highlight(widget, value, optional)
                if value != "None":  # Ensure the value is not "None" (None helps in ignoring the whole cli_tag & value pair)
                    if cli_order < 0:
                        insert_into_jagged_array(jagged_negative_array, cli_order, cli_tag, value)
                    else:
                        insert_into_jagged_array(jagged_positive_array, cli_order, cli_tag, value)
            elif isinstance(widget, widgets.Textarea): 
                value = widget.value
                # Validate and highlight the widget if needed
                validate_and_highlight(widget, value, optional)
                if value: # None value should be ignored
                    if cli_order < 0:
                        insert_into_jagged_array(jagged_negative_array, cli_order, cli_tag, value)
                    else:
                        insert_into_jagged_array(jagged_positive_array, cli_order, cli_tag, value)
            else:
                value = widget.value
                # Validate and highlight the widget if needed
                validate_and_highlight(widget, value, optional)
                if cli_order < 0:
                    insert_into_jagged_array(jagged_negative_array, cli_order, cli_tag, value)
                else:
                    insert_into_jagged_array(jagged_positive_array, cli_order, cli_tag, value)


    # Append Positive ordered elements
    for index in range(1, len(jagged_positive_array)):
        if jagged_positive_array[index]:
            cli_command_parts.extend(jagged_positive_array[index])

    # Append elements with cli_order == 0
    if jagged_positive_array and jagged_positive_array[0]:
        cli_command_parts.extend(jagged_positive_array[0])

    # Append Negative ordered elements in reverse order
    for index in range(len(jagged_negative_array) - 1, 0, -1):
        if jagged_negative_array[index]:
            cli_command_parts.extend(jagged_negative_array[index])

    return " ".join(cli_command_parts)

def update_command(change: Any) -> None:
    """
    Updates the CLI command when a widget value changes.

    Args:
        change (Any): The event triggering the update.
    """
    cli_command.value = construct_cli_command()

cli_command: widgets.Textarea = widgets.Textarea(value=construct_cli_command(), description="CLI Command", layout=widgets.Layout(width="90%"))

for key, param_info in param_vars.items():
    widget = param_info["widget"]

    # Case A: FileUpload widget --> use custom handler
    if isinstance(widget, widgets.FileUpload):
        widget.observe(handle_file_upload, names='value')

    # Case B: all other widgets --> use normal observer
    elif hasattr(widget, 'observe'):
        widget.observe(update_command, names='value')

if __name__ == "__main__":
    from IPython.display import display
    display(acc, cli_command)
