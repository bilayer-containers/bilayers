from ipywidgets import widgets, VBox, HBox, Tab, Accordion
from IPython.display import display
import tempfile
import os
import nbformat as nbf
import json

{% autoescape false %}
parameters = {{parameters}}
display_only = {{display_only}}
exec_function = {{exec_function}}
results = {{results}}

{% endautoescape %}


beginner_widgets = []
advanced_widgets = []

param_vars = []

# Appending args in cli_command
cli_command = []
cli_command.append(exec_function['cli_command'])

radio_options = {

    {% if parameters is not none -%}
    {% for param_conf in parameters if param_conf.type == 'Radio' -%}
        "{{ param_conf.label | lower | replace(' ', '_') }}": {
            {% for option in param_conf.options %}
            "{{ option.label }}": "{{ option.value }}"{% if not loop.last -%}, {%- endif %}
            {%- endfor %}
        }{% if not loop.last -%}, {%- endif %}
    {% endfor -%}
    {% endif -%}
    {% if display_only is not none -%}
    {% for display_only_conf in display_only if display_only_conf.type == 'Radio' -%}
        "{{ display_only_conf.label | lower | replace(' ', '_') }}": {
            {% for option in display_only_conf.options %}
            "{{ option.label }}": "{{ option.value }}"{% if not loop.last -%}, {%- endif %}
            {%- endfor %}
        }{% if not loop.last -%}, {%- endif %}
    {% endfor -%}
    {% endif -%}
    }

{% if parameters is not none -%}
{% for param_conf in parameters -%}
{% if param_conf.type == 'Files' and param_conf.file_count == "multiple" %}
{{ param_conf.label | lower | replace(" ", "_") }} = widgets.FileUpload(multiple=True)
{% elif param_conf.type == 'Files' and param_conf.file_count == "single" %}
{{ param_conf.label | lower | replace(" ", "_") }} = widgets.FileUpload(multiple=False)
{% elif param_conf.type == 'Radio' %}
{{ param_conf.label | lower | replace(" ", "_") }} = widgets.RadioButtons(options=[{% for option in param_conf.options %}("{{ option.label }}", "{{ option.value }}"){% if not loop.last %}, {% endif %}{% endfor %}], value="{{ param_conf.default }}")
{% elif param_conf.type == 'Integer' %}
{{ param_conf.label | lower | replace(" ", "_") }} = widgets.IntText(value={{ param_conf.default }})
{% elif param_conf.type == 'Float' %}
{{ param_conf.label | lower | replace(" ", "_") }} = widgets.FloatText(value={{ param_conf.default }})
{% elif param_conf.type == 'Textbox' %}
{{ param_conf.label | lower | replace(" ", "_") }} = widgets.Textarea(value="{{ param_conf.default if param_conf.default is not none else '' }}")
{% elif param_conf.type == 'Checkbox' %}
{{ param_conf.label | lower | replace(" ", "_") }} = widgets.Checkbox(value={{ param_conf.default }})
{%- endif %}

# Add a description label
{{ "desc_" + param_conf.label | lower | replace(" ", "_") }}  = widgets.HTML(value = "<b>{{ param_conf['label'] }} </b> :  {{ param_conf.get('description', '') }}")

# Add widget and description to accordion
tab = Tab(children=[HBox([widgets.Label("{{ param_conf['label'] }}"), {{ param_conf.label | lower | replace(" ", "_") }}]), {{ "desc_" + param_conf.label | lower | replace(" ", "_") }}])
tab.set_title(0, "{{ param_conf['label'] }}")
tab.set_title(1, "Description")

# Append the corresponding cli_tag, widget to param_vars
{% if param_conf.type == 'Files' %}
param_vars.append(("{{ param_conf['cli_tag'] }}", {{ param_conf.label | lower | replace(" ", "_") }}, "{{ param_conf.get('folder_name', '') }}"))
{% elif param_conf.type == 'Checkbox' %}
param_vars.append(("{{ param_conf['cli_tag'] }}", {{ param_conf.label | lower | replace(" ", "_") }}, {{ param_conf.get('append_value', False) }} ))
{% else %}
param_vars.append(("{{ param_conf['cli_tag'] }}", {{ param_conf.label | lower | replace(" ", "_") }}))
{% endif %}

{% if param_conf.mode == 'beginner' -%}
beginner_widgets.append(tab)
{% else %}
advanced_widgets.append(tab)
{%- endif %}
{%- endfor %}
{%- endif %}

{# Parsing display_only section #}
{% if display_only is not none -%}
{% for display_only_conf in display_only -%}
{% if display_only_conf.type == 'Files' and display_only_conf.file_count == "multiple" %}
{{ display_only_conf.label | lower | replace(" ", "_") }} = widgets.FileUpload(multiple=True)
{% elif display_only_conf.type == 'Files' and display_only_conf.file_count == "single" %}
{{ display_only_conf.label | lower | replace(" ", "_") }} = widgets.FileUpload(multiple=False)
{% elif display_only_conf.type == 'Radio' %}
{{ display_only_conf.label | lower | replace(" ", "_") }} = widgets.RadioButtons(options=[{% for option in display_only_conf.options %}("{{ option.label }}", "{{ option.value }}"){% if not loop.last %}, {% endif %}{% endfor %}], value="{{ display_only_conf.default }}", disabled=True)
{% elif display_only_conf.type == 'Integer' %}
{{ display_only_conf.label | lower | replace(" ", "_") }} = widgets.IntText(value={{ display_only_conf.default }}, disabled=True)
{% elif display_only_conf.type == 'Float' %}
{{ display_only_conf.label | lower | replace(" ", "_") }} = widgets.FloatText(value={{ display_only_conf.default }}, disabled=True)
{% elif display_only_conf.type == 'Textbox' %}
{{ display_only_conf.label | lower | replace(" ", "_") }} = widgets.Textarea(value="{{ display_only_conf.default if display_only_conf.default is not none else '' }}", disabled=True)
{% elif display_only_conf.type == 'Checkbox' %}
{{ display_only_conf.label | lower | replace(" ", "_") }} = widgets.Checkbox(value={{ display_only_conf.default }}, disabled=True)
{%- endif %}


# Add a description label
{{ "desc_" + display_only_conf.label | lower | replace(" ", "_") }}  = widgets.HTML(value = "<b>{{ display_only_conf['label'] }} </b> :  {{ display_only_conf.get('description', '') }}")

# Add widget and description to accordion
tab = Tab(children=[HBox([widgets.Label("{{ display_only_conf['label'] }}"), {{ display_only_conf.label | lower | replace(" ", "_") }}]), {{ "desc_" + display_only_conf.label | lower | replace(" ", "_") }}])
tab.set_title(0, "{{ display_only_conf['label'] }}")
tab.set_title(1, "Description")

# Append the corresponding cli_tag, widget to param_vars
param_vars.append(("{{ display_only_conf['cli_tag'] }}", {{ display_only_conf.label | lower | replace(" ", "_") }}))

{% if display_only_conf.mode == 'beginner' -%}
beginner_widgets.append(tab)
{% else %}
advanced_widgets.append(tab)
{%- endif %}

{%- endfor %}
{%- endif %}

acc = Accordion()
# Add beginner_widgets to the first section
acc.children = [VBox(beginner_widgets)]
acc.set_title(0, "Beginner's Section")
# Add advanced_widgets to the second section
acc.children = acc.children + (VBox(advanced_widgets),)
acc.set_title(1, "Advanced Section")

def option_to_append(cli_tag, value):
    if cli_tag is None:
        return None  # Do nothing for display_only
    elif cli_tag == "":
        return str(value)  # Append only the value
    else:
        return f"{cli_tag} {value}"  # Append cli_tag and value


def construct_cli_command():
    cli_command = ["{{ exec_function.cli_command }}"]
    for param_var in param_vars:
            cli_tag = param_var[0]
            widget = param_var[1]
            
            if len(param_var) == 3:  
            
                if isinstance(widget, widgets.FileUpload): # This is a 'Files' type
                    folder_name = param_var[2]
                    if cli_tag == "":
                        cli_command.append(folder_name)
                    elif cli_tag is None:
                        continue  # Do nothing for display_only
                    else:
                        cli_command.append(f"{cli_tag} {folder_name}")
            
                elif isinstance(widget, widgets.Checkbox):  # This is a 'Checkbox' type
                    append_value = param_var[2]
                    value = widget.value
                    if value:  
                        if append_value:
                            cli_command.append(f"{cli_tag} True")
                        else:
                            cli_command.append(f"{cli_tag}")
                    else:
                        if append_value:
                            cli_command.append(f"{cli_tag} False")
        
            
            else:  # Handling other types then Files and Checkbox
                
                if isinstance(widget, widgets.Textarea):
                    value = widget.value
                    if value:  # Non-empty TextArea value
                        result = option_to_append(cli_tag, value)
                        if result:
                            cli_command.append(result)

                elif isinstance(widget, widgets.RadioButtons):
                    value = widget.value
                    if value != "None":  # Ensure the value is not "None"
                        result = option_to_append(cli_tag, value)
                        if result:
                            cli_command.append(result)
            
                else:
                    value = widget.value
                    # For other widget types
                    result = option_to_append(cli_tag, value)
                    if result:
                        cli_command.append(result)

    # Add hidden arguments to the command
    {% if exec_function.hidden_args %}
    {% for arg in exec_function.hidden_args %}
    if {{ arg.value }} == True:
        cli_command.append("{{ arg.cli_tag }}")
    else:
        cli_command.append("{{ arg.cli_tag }} {{ arg.value }}")
    {% endfor %}
    {% endif %}

    return " ".join(cli_command)

def update_command(change):
    cli_command.value = construct_cli_command()

cli_command = widgets.Textarea(value=construct_cli_command(), description="CLI Command")

for param_var in param_vars:
    widget = param_var[1]
    widget.observe(update_command, names='value')

display(acc, cli_command)


if __name__ == "main":
    print("Hello World")