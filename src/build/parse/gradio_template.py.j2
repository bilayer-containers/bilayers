import os
import gradio as gr
import subprocess
import shutil
from typing import Any, Tuple

def option_to_append(cli_tag: str, value: Any) -> str:
    """
    Formats CLI options for appending to the command.

    Args:
        cli_tag (str): CLI tag (e.g., "--option").
        value (Any): The value to append.

    Returns:
        str: The formatted CLI option.
    """
    if cli_tag == "":
        return str(value)  # Append only the value
    else:
        if "=" in cli_tag:
            return f"{cli_tag}{value}"
        return f"{cli_tag} {value}"  # Append cli_tag and value

def insert_into_jagged_array(
    jagged_array: list[list[str] | None], 
    cli_order: int, 
    cli_tag: str, 
    value: Any
    ) -> None:
    """
    Inserts CLI arguments into a structured array to maintain ordering.

    Args:
        jagged_array (list[list[str] | None]): The structured array for CLI options.
        cli_order (int): The order in which arguments should appear.
        cli_tag (str): The CLI tag.
        value (Any): The value to append.
    """
    # Check the length of Jagged Array and dynamically append with None if required
    while len(jagged_array) <= abs(cli_order):
        jagged_array.append(None)

    # Initialize the sublist if it's not already
    {# jagged_array[abs(cli_order)] = jagged_array[abs(cli_order)] or [] #}
    if jagged_array[abs(cli_order)] is None:
        jagged_array[abs(cli_order)] = []

    # Append the cli_tag and value to the appropriate sublist
    result = option_to_append(cli_tag, value)
    jagged_array[abs(cli_order)].append(result)

def generate_cli_command(
    cli_tags: dict[str, dict[str, Any]], 
    **kwargs: Any
    ) -> Tuple[str, str | None, str | None]:
    """
    Generates the CLI command dynamically based on user inputs.

    Args:
        cli_tags (dict[str, dict[str, Any]]): Mapping of parameters to CLI tags.
        **kwargs (Any): User-provided parameter values.

    Returns:
        Tuple[str, str | None, str | None]: CLI command, folder_name, and output_folder_name.
    """
    cli_command = ["{{ exec_function.cli_command }}"]

    # Radio options mapping
    radio_options = {
    {% if parameters is not none -%}
    {% for param_conf in parameters if param_conf.type == 'radio' -%}
        "{{ param_conf.label | lower | replace(' ', '_') }}": {
            {% for option in param_conf.options -%}
            "{{ option.label }}": "{{ option.value }}"{% if not loop.last %}, {% endif %}
            {%- endfor %}
        },
    {%- endfor %}
    {% for param_conf in parameters if param_conf.type == 'dropdown' -%}
        "{{ param_conf.label | lower | replace(' ', '_') }}": {
            {% for option in param_conf.options -%}
            "{{ option.label }}": "{{ option.value }}"{% if not loop.last %}, {% endif %}
            {%- endfor %}
        },
    {%- endfor %}
    {%- endif %}
    {% if display_only is not none -%}
    {% for display_only_conf in display_only if display_only_conf.type == 'radio' -%}
        "{{ display_only_conf.label | lower | replace(' ', '_') }}": {
            {% for option in display_only_conf.options -%}
            "{{ option.label }}": "{{ option.value }}"{% if not loop.last %}, {% endif %}
            {%- endfor %}
        },
    {%- endfor %}
    {% for display_only_conf in display_only if display_only_conf.type == 'dropdown' -%}
        "{{ display_only_conf.label | lower | replace(' ', '_') }}": {
            {% for option in display_only_conf.options -%}
            "{{ option.label }}": "{{ option.value }}"{% if not loop.last %}, {% endif %}
            {%- endfor %}
        },
    {%- endfor %}
    {%- endif %}
    }

    folder_name = None
    output_folder_name = None
    append_value = None

    # Jagged Array Define
    jagged_positive_array = []
    jagged_negative_array = []

    # Update cli_args with user parameters or defaults
    for key, value in kwargs.items():
        if key in cli_tags:
            cli_tag: str = cli_tags[key].get("cli_tag", None)
            default: Any = cli_tags[key].get("default", None)
            cli_order: int = cli_tags[key].get("cli_order", 0)
            label: str = cli_tags[key].get("label", None)
            optional: bool = cli_tags[key].get("optional", False)

            # First, check the condition if cli_order is negative then dynamically append the size of jagged_negative_array
            if cli_order < 0:
                while len(jagged_negative_array) <= abs(cli_order):
                    jagged_negative_array.append(None)  # Append None to fill gaps

            while len(jagged_positive_array) <= cli_order:
                jagged_positive_array.append(None)  # Append None to fill gaps

            if isinstance(value, bool):
                append_value = cli_tags[key].get("append_value", False)
                if append_value:
                    if cli_order < 0:
                        insert_into_jagged_array(jagged_negative_array, cli_order, cli_tag, value)  
                    else:
                        insert_into_jagged_array(jagged_positive_array, cli_order, cli_tag, value)
                else:
                    if value: 
                        if cli_order < 0:
                            jagged_negative_array[abs(cli_order)] = jagged_negative_array[abs(cli_order)] or []
                            jagged_negative_array[abs(cli_order)].append(cli_tag)
                        else:
                            jagged_positive_array[cli_order] = jagged_positive_array[cli_order] or []
                            jagged_positive_array[cli_order].append(cli_tag)
            else:
                # Handle Radio type mappings dynamically
                if key in radio_options and value in radio_options[key]:
                    value = radio_options[key][value]
                    if value == "None":
                        if optional is False:
                            error_message = f"{label} needs to have some value. It's Mandatory!"
                            raise gr.Error(error_message, duration = None)
                        else:
                            continue
                # If the parameter is a list (mainly `inputs` section where type can be either of image, file, measurement, array, executable), convert it to a string
                elif isinstance(value, list):
                    folder_name = cli_tags[key]["folder_name"] # Direct access since it's guarranteed to exist
                    print("Folder Name:", folder_name)
                    os.makedirs(folder_name, exist_ok=True)
                    print("Value of dir", value)
                    for file_path in value:
                        shutil.copy(file_path, folder_name)
                    value = folder_name
                # If the parameter is a TextBox, check if it has a directory-name i.e. it's coming for declaring ouput path
                elif isinstance(value, str) and value!="":
                    output_dir_set = cli_tags[key].get("output_dir_set") # May be missing, so .get() prevents crashes by returning None
                    if output_dir_set == True:
                        output_folder_name = value
                        os.makedirs(output_folder_name, exist_ok=True)
                        if cli_tag != "None":
                            value = output_folder_name 
                    elif output_dir_set == False:
                        output_folder_name = default
                        os.makedirs(default, exist_ok=True)
                        if cli_tag != "None":
                            value = default

                # If the value of (textbox) is empty string, set it to None
                if value == "":
                    value = None
                    if optional is False:
                        error_message = f"{label} needs to have some value. It's Mandatory!"
                        raise gr.Error(error_message, duration = None)
                # If the cli_tag is None, don't include it in the command but if cli_tag is "" then just include the value
                elif value is not None:
                    if cli_tag != "None":
                        if cli_order < 0: 
                            insert_into_jagged_array(jagged_negative_array, cli_order, cli_tag, value)
                        else:
                            insert_into_jagged_array(jagged_positive_array, cli_order, cli_tag, value)

    # Add hidden arguments to the command
    {% autoescape false %}
    hidden_args = {{ exec_function.get("hidden_args", []) or []}}
    print("Hidden Args:", hidden_args)
    {% endautoescape %}

    # If hidden_args exists
    if hidden_args:
        for arg in hidden_args:
            cli_tag = arg.get("cli_tag", '')
            value = arg.get("value", '')
            append_value = arg.get("append_value", False)
            cli_order = arg.get("cli_order", 0)

            if cli_order < 0:
                while len(jagged_negative_array) <= abs(cli_order):
                    jagged_negative_array.append(None)  # Append None to fill gaps

            while len(jagged_positive_array) <= cli_order:
                jagged_positive_array.append(None)  # Append None to fill gaps

            if isinstance(value, bool):
                if append_value:
                    if cli_order < 0:
                        insert_into_jagged_array(jagged_negative_array, cli_order, cli_tag, value)  
                    else:
                        insert_into_jagged_array(jagged_positive_array, cli_order, cli_tag, value)
                else:
                    if value: 
                        if cli_order < 0:
                            jagged_negative_array[abs(cli_order)] = jagged_negative_array[abs(cli_order)] or []
                            jagged_negative_array[abs(cli_order)].append(cli_tag)
                        else:
                            jagged_positive_array[cli_order] = jagged_positive_array[cli_order] or []
                            jagged_positive_array[cli_order].append(cli_tag)

            else:
                if cli_order < 0:
                    insert_into_jagged_array(jagged_negative_array, cli_order, cli_tag, value)
                else:
                    insert_into_jagged_array(jagged_positive_array, cli_order, cli_tag, value)

    # Debug if Jagged Array is storing the correct values
    print("Jagged Positive Array:", jagged_positive_array)
    print("Jagged Negative Array:", jagged_negative_array)

    # Append Positive ordered elements
    for index in range(1, len(jagged_positive_array)):
        if jagged_positive_array[index]:
            cli_command.extend(jagged_positive_array[index])

    # Append elements with cli_order == 0
    if jagged_positive_array and jagged_positive_array[0]:
        cli_command.extend(jagged_positive_array[0])

    # Append Negative ordered elements
    for index in range(len(jagged_negative_array) - 1, 0, -1):
        if jagged_negative_array[index]:
            cli_command.extend(jagged_negative_array[index])

    return " ".join(cli_command), folder_name, output_folder_name

# Dynamically define on_submit with the exact parameter arguments
def on_submit(
{% if inputs is not none -%}
{% for input_conf in inputs -%}
{% if input_conf.type in ['image', 'measurement', 'array', 'file', 'executable'] %}
{{input_conf.label | lower | replace(" ", "_")}}_description,
{{ input_conf.label | lower | replace(" ", "_") }},
{% else %}
{{ input_conf.label | lower | replace(" ", "_") }},
{%- endif %}
{%- endfor %}
{%- endif %}
{% if parameters is not none -%}
{% for param_conf in parameters -%}
{{ param_conf.label | lower | replace(" ", "_") }},
{%- endfor %}
{%- endif %}
{% if display_only is not none -%}
{% for display_only_conf in display_only -%}
{{ display_only_conf.label | lower | replace(" ", "_") }},
{%- endfor %}
{%- endif %}
):

    kwargs = {
    {% if inputs is not none %}
    {% for input_conf in inputs %}
        "{{ input_conf.label | lower | replace(' ', '_') }}": {{ input_conf.label | lower | replace(' ', '_') }},
    {% endfor %}
    {% endif %}
    {% if parameters is not none %}
    {% for param_conf in parameters %}
        "{{ param_conf.label | lower | replace(' ', '_') }}": {{ param_conf.label | lower | replace(' ', '_') }},
    {% endfor %}
    {% endif %}
    }

    # Mapping of parameter tags to CLI tags
    cli_tags = {
    {% for input_conf in inputs %}
    "{{ input_conf.label | lower | replace(' ', '_') }}": {
        "cli_tag": "{{ input_conf.cli_tag }}",
        "default": "{{ input_conf.default }}",
        "cli_order": {{ input_conf.cli_order | default(0) }},
        "optional": {{ input_conf.optional }},
        "label": "{{ input_conf.label }}",
        {% if input_conf.type in ['image', 'measurement', 'file', 'array', 'executable'] %}
        "folder_name": "{{ input_conf.folder_name }}"
        {% endif %}
    },
    {% endfor %}
    {% for param_conf in parameters %}
    "{{ param_conf.label | lower | replace(' ', '_') }}": {
        "cli_tag": "{{ param_conf.cli_tag }}",
        "default": "{{ param_conf.default }}",
        "cli_order": {{ param_conf.cli_order | default(0) }},
        "optional": {{ param_conf.optional }},
        "label": "{{ param_conf.label }}",
        {% if param_conf.type == 'checkbox' %}
            {% if param_conf.append_value is defined %}
        "append_value": {{ param_conf.append_value }},
            {% endif %}
        {% endif %}
        {% if param_conf.type == 'textbox' %}
            {% if param_conf.output_dir_set is defined %}
        "output_dir_set": {{ param_conf.output_dir_set }}
            {% endif %}
        {% endif %}
    }{% if not loop.last %},{% endif %}
    {% endfor %}
    }

    print("Received parameters:", kwargs)

    # Generate the CLI command
    cli_command, folder_name, output_folder_name = generate_cli_command(cli_tags, **kwargs)
    print("Generated CLI command:", cli_command)

    # Execute the CLI command
    try:
        result = subprocess.run(cli_command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print("Command executed successfully")

        # Check if output_folder_name is not None and is a directory
        if output_folder_name and os.path.exists(output_folder_name) and os.path.isdir(output_folder_name):
            print("Folder exists")
            # Display Output files
            output_files = [os.path.join(output_folder_name, f) for f in os.listdir(output_folder_name) if os.path.isfile(os.path.join(output_folder_name, f))]
        else:
            print("Folder does not exist or output_folder_name is None")
            output_files = []

        return output_files

    except subprocess.CalledProcessError as e:
        error_message = "Please take a screenshot of this error and raise an issue at the Bilayers repository on GitHub."
        error_message += f"Command failed with error: {e.stderr.decode()}\n\n"
        raise gr.Error(error_message, duration = None)
        
{% if inputs is not none -%}
{% for input_conf in inputs %}

{% if input_conf.type == 'image' %}
{{ input_conf.label | lower | replace(" ", "_") }}_description = gr.Markdown(value="{{ input_conf.description }}")
{{ input_conf.label | lower | replace(" ", "_") }} = gr.Files(label="{{ input_conf.label }}", file_count="{{ input_conf.file_count }}")
{% elif input_conf.type == 'measurement' %}
{{ input_conf.label | lower | replace(" ", "_") }}_description = gr.Markdown(value="{{ input_conf.description }}")
{{ input_conf.label | lower | replace(" ", "_") }} = gr.Files(label="{{ input_conf.label }}", file_count="{{ input_conf.file_count }}")
{% elif input_conf.type == 'array' %}
{{ input_conf.label | lower | replace(" ", "_") }}_description = gr.Markdown(value="{{ input_conf.description }}")
{{ input_conf.label | lower | replace(" ", "_") }} = gr.Files(label="{{ input_conf.label }}", file_count="{{ input_conf.file_count }}")
{% elif input_conf.type == 'file' %}
{{ input_conf.label | lower | replace(" ", "_") }}_description = gr.Markdown(value="{{ input_conf.description }}")
{{ input_conf.label | lower | replace(" ", "_") }} = gr.Files(label="{{ input_conf.label }}", file_count="{{ input_conf.file_count }}")
{% elif input_conf.type == 'executable' %}
{{ input_conf.label | lower | replace(" ", "_") }}_description = gr.Markdown(value="{{ input_conf.description }}")
{{ input_conf.label | lower | replace(" ", "_") }} = gr.Files(label="{{ input_conf.label }}", file_count="{{ input_conf.file_count }}")
{% endif %}


{% endfor %}
{%- endif %}

{% if parameters is not none -%}
{% for param_conf in parameters %}

{% if param_conf.type == 'radio' -%}
{{ param_conf.label | lower | replace(" ", "_") }} = gr.Radio(label="{{ param_conf.label }}", info="{{ param_conf.description }}",  choices=[{% for option in param_conf.options %}"{{ option.label }}"{% if not loop.last %}, {% endif %}{% endfor %}], value="{{ param_conf.default }}")
{% elif param_conf.type == 'dropdown' %}
{{ param_conf.label | lower | replace(" ", "_") }} = gr.Dropdown(label="{{ param_conf.label }}", info="{{ param_conf.description }}",  choices=[{% for option in param_conf.options %}("{{ option.label }}", "{{ option.value }}"){% if not loop.last %}, {% endif %}{% endfor %}], value="{{ param_conf.default }}", multiselect = {{ param_conf.multiselect }})
{% elif param_conf.type == 'integer' %}
{{ param_conf.label | lower | replace(" ", "_") }} = gr.Number(label="{{ param_conf.label }}", info="{{ param_conf.description }}", value={{ param_conf.default }})
{% elif param_conf.type == 'float' %}
{{ param_conf.label | lower | replace(" ", "_") }} = gr.Number(label="{{ param_conf.label }}", info="{{ param_conf.description }}", value={{ param_conf.default }})
{% elif param_conf.type == 'textbox' and param_conf.output_dir_set == False %}
{{ param_conf.label | lower | replace(" ", "_") }} = gr.Textbox(label="{{ param_conf.label }}", info="{{ param_conf.description }}", value="{{ param_conf.default }}", interactive=False)
{% elif param_conf.type == 'textbox' %}
{{ param_conf.label | lower | replace(" ", "_") }} = gr.Textbox(label="{{ param_conf.label }}", info="{{ param_conf.description }}", value="{{ param_conf.default }}")
{% elif param_conf.type == 'checkbox' %}
{{ param_conf.label | lower | replace(" ", "_") }} = gr.Checkbox(label="{{ param_conf.label }}", info="{{ param_conf.description }}", value={{ param_conf.default }})
{% endif %}


{% endfor %}  
{%- endif %}

{% if display_only is not none -%}
{% for display_only_conf in display_only -%}
{% if display_only_conf.type == 'radio' -%}
{{ display_only_conf.label | lower | replace(" ", "_") }} = gr.Radio(label="{{ display_only_conf.label }}", info="{{ display_only_conf.description }}",  choices=[{% for option in display_only_conf.options %}"{{ option.label }}"{% if not loop.last %}, {% endif %}{% endfor %}], value="{{ display_only_conf.default }}", interactive=False)
{% elif display_only_conf.type == 'dropdown' %}
{{ display_only_conf.label | lower | replace(" ", "_") }} = gr.Dropdown(label="{{ display_only_conf.label }}", info="{{ display_only_conf.description }}",  choices=[{% for option in display_only_conf.options %}("{{ option.label }}", "{{option.value}}"){% if not loop.last %}, {% endif %}{% endfor %}], value="{{ display_only_conf.default }}", interactive=False, multiselect = {{ display_only_conf.multiselect }})
{% elif display_only_conf.type == 'integer' %}
{{ display_only_conf.label | lower | replace(" ", "_") }} = gr.Number(label="{{ display_only_conf.label }}", info="{{ display_only_conf.description }}", value={{ display_only_conf.default }}, interactive=False)
{% elif display_only_conf.type == 'float' %}
{{ display_only_conf.label | lower | replace(" ", "_") }} = gr.Number(label="{{ display_only_conf.label }}", info="{{ display_only_conf.description }}", value={{ display_only_conf.default }}, interactive=False)
{% elif display_only_conf.type == 'textbox' %}
{{ display_only_conf.label | lower | replace(" ", "_") }} = gr.Textbox(label="{{ display_only_conf.label }}", info="{{ display_only_conf.description }}", value="{{ display_only_conf.default }}", interactive=False)
{% elif display_only_conf.type == 'checkbox' %}
{{ display_only_conf.label | lower | replace(" ", "_") }} = gr.Checkbox(label="{{ display_only_conf.label }}", info="{{ display_only_conf.description }}", value={{ display_only_conf.default }}, interactive=False)
{%- endif %}
{%- endfor %}
{%- endif %}



{% set DEFAULT_CITATIONS = {
    "Gradio": [
        {
            "name" : "Gradio",
            "doi" : "10.48550/arXiv.190602569",
            "license" : "Apache License 2.0",
            "description" : "A simple web interface for deploying machine learning models"
        },
    ],
    "Bilayers": [
        {
            "name" : "Bilayers",
            "license" : "BSD 3-Clause",
            "description" : "A Container Specification and CI/CD  built for whole-community support"
        },
    ],
} %}

description_text = "Please cite the following while using Bilayers X Gradio Interface!\n\n"

{% for citation in citations.algorithm %}
description_text += f"{{ citation.name }} under {{ citation.license }} License: {{ citation.doi }} -- {{ citation.description }}\n\n"
{% endfor %}

{% for citation_type, citation_list in DEFAULT_CITATIONS.items() -%}
{% for citation in citation_list -%}
{% if citation_type == "Gradio" -%}
description_text += f"{{ citation.name }} under {{ citation.license }} License : {{ citation.doi }} -- {{ citation.description }}\n\n"
{% elif citation_type == "Bilayers" %}
description_text += f"{{ citation.name }} under {{ citation.license }} License : {{ citation.description }}\n\n"
{%- endif %}
{%- endfor %}
{%- endfor %}




all_parameters: list[Any] = [
{# Getting stuff from inputs #}
{% if inputs is not none -%}
{% for input_conf in inputs -%}
{% if input_conf.type in ['image', 'measurement', 'array', 'file', 'executable'] -%}
    {{input_conf.label | lower | replace(" ", "_")}}_description,
    {{ input_conf.label | lower | replace(" ", "_") }},
{% else %}
    {{ input_conf.label | lower | replace(" ", "_") }},
{%- endif %}
{%- endfor %}
{%- endif %}
{# Getting stuff from parameters #}
{% if parameters is not none -%}
{% for param_conf in parameters -%}
{{ param_conf.label | lower | replace(" ", "_") }},
{%- endfor %}
{%- endif %}
{# Getting stuff from display_only #}
{% if display_only is not none -%}
{% for display_only_conf in display_only -%}
{{ display_only_conf.label | lower | replace(" ", "_") }},
{%- endfor %}
{%- endif %}
]

download_results_from_here = gr.Files(label = "Download Output", file_count = "multiple")

app = gr.Interface(
    fn=on_submit, 
    inputs=all_parameters,
    outputs=download_results_from_here, 
    title="Gradio App",
    description=f"<div style='text-align: center'>{description_text}</div>"
)

if __name__ == "__main__":
    app.launch(server_name="0.0.0.0", server_port=7878)