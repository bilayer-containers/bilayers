import os
import gradio as gr
import subprocess

def generate_cli_command(**kwargs):
    cli_command = ["{{ exec_function.cli_command }}"]
    
    #Mapping CLI tags to arguments
    cli_args = {
    {% for arg in exec_function.cli_args %}
        "{{ arg }}": None{% if not loop.last %}, {% endif %}
    {% endfor %}
    }

    # User inputs with their CLI tags and default values
    cli_tags = {
    {% for input_conf in inputs %}
        "{{ input_conf.label | lower | replace(' ', '_') }}": {
            "cli_tag": "{{ input_conf.cli_tag }}",
            "default": "{{ input_conf.default }}"
        }{% if not loop.last %}, {% endif %}
    {% endfor %}
    }

    # Radio options mapping
    radio_options = {
    {% for input_conf in inputs if input_conf.type == 'Radio' %}
        "{{ input_conf.label | lower | replace(' ', '_') }}": {
            {% for option in input_conf.options %}
            "{{ option.label }}": "{{ option.value }}"{% if not loop.last %}, {% endif %}
            {% endfor %}
        }{% if not loop.last %}, {% endif %}
    {% endfor %}
    }

    # Update cli_args with user inputs or defaults
    for key, value in kwargs.items():
        if key in cli_tags:
            if isinstance(value, bool):
                if value:  # Only include the flag if it is True
                    cli_args[cli_tags[key]["cli_tag"]] = ""
            else:
                # Handle Radio type mappings dynamically
                if key in radio_options and value in radio_options[key]:
                    value = radio_options[key][value]
                cli_args[cli_tags[key]["cli_tag"]] = value

    # Construct the CLI command
    for tag, value in cli_args.items():
        if value is not None:
            if value == "":
                cli_command.append(f"{tag}")
            else:
                cli_command.append(f"{tag} {value}")
        else:
            # Add default value if not provided by user
            for key, val in cli_tags.items():
                if val["cli_tag"] == tag and val["default"]:
                    cli_command.append(f"{tag} {val['default']}")

    return " ".join(cli_command)

# Dynamically define on_submit with the exact input arguments
def on_submit({% for input_conf in inputs %}{{ input_conf.label | lower | replace(' ', '_') }}{% if not loop.last %}, {% endif %}{% endfor %}):
    kwargs = {
    {% for input_conf in inputs %}
        "{{ input_conf.label | lower | replace(' ', '_') }}": {{ input_conf.label | lower | replace(' ', '_') }}{% if not loop.last %}, {% endif %}
    {% endfor %}
    }
    print("Received inputs:", kwargs)

    cli_command = generate_cli_command(**kwargs)
    print("Generated CLI command:", cli_command)

    # Execute the CLI command
    try:
        result = subprocess.run(cli_command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print("Command output:", result.stdout.decode())
    except subprocess.CalledProcessError as e:
        print("Command failed with error:", e.stderr.decode())




{% for input_conf in inputs %}
{% if input_conf.type == 'Radio' %}
{{ input_conf.label | lower | replace(" ", "_") }} = gr.Radio(label="{{ input_conf.label }}", choices=[{% for option in input_conf.options %}"{{ option.label }}"{% if not loop.last %}, {% endif %}{% endfor %}], value="{{ input_conf.default }}")
{% elif input_conf.type == 'Number' %}
{{ input_conf.label | lower | replace(" ", "_") }} = gr.Number(label="{{ input_conf.label }}", value={{ input_conf.default }})
{% elif input_conf.type == 'Textbox' %}
{{ input_conf.label | lower | replace(" ", "_") }} = gr.Textbox(label="{{ input_conf.label }}", value="{{ input_conf.default }}")
{% elif input_conf.type == 'Checkbox' %}
{{ input_conf.label | lower | replace(" ", "_") }} = gr.Checkbox(label="{{ input_conf.label }}", value={{ input_conf.value }})
{% endif %}
{% endfor %}

inputs = [
{% for input_conf in inputs %}
    {{ input_conf.label | lower | replace(" ", "_") }}{% if not loop.last %}, {% endif %}
{% endfor %}
]

output = gr.Files(label="{{ outputs[0].label }}")

app = gr.Interface(
    fn=on_submit, 
    inputs=inputs, 
    outputs=output, 
    title="Gradio App"
)

if __name__ == "__main__":
    app.launch(server_name="0.0.0.0", server_port=8000)
