from ipywidgets import widgets, VBox, HBox, Tab, Accordion
from IPython.display import display

{% autoescape false %}
parameters = {{parameters}}
display_only = {{display_only}}
exec_function = {{exec_function}}
results = {{results}}

{% endautoescape %}

beginner_widgets = []
advanced_widgets = []

param_vars = []

# Appending args in cli_command
cli_command = []
cli_command.append(exec_function['cli_command'])

radio_options = {

    {% if parameters is not none -%}
    {% for param_conf in parameters if param_conf.type == 'radio' -%}
        "{{ param_conf.label | lower | replace(' ', '_') }}": {
            {% for option in param_conf.options %}
            "{{ option.label }}": "{{ option.value }}"{% if not loop.last -%}, {%- endif %}
            {%- endfor %}
        },
    {% endfor -%}
    {% for param_conf in parameters if param_conf.type == 'dropdown' -%}
        "{{ param_conf.label | lower | replace(' ', '_') }}": {
            {% for option in param_conf.options %}
            "{{ option.label }}": "{{ option.value }}"{% if not loop.last -%}, {%- endif %}
            {%- endfor %}
        },
    {% endfor -%}
    {% endif -%}
    {% if display_only is not none -%}
    {% for display_only_conf in display_only if display_only_conf.type == 'radio' -%}
        "{{ display_only_conf.label | lower | replace(' ', '_') }}": {
            {% for option in display_only_conf.options %}
            "{{ option.label }}": "{{ option.value }}"{% if not loop.last -%}, {%- endif %}
            {%- endfor %}
        },
    {% endfor -%}
    {% for display_only_conf in display_only if display_only_conf.type == 'dropdown' -%}
        "{{ display_only_conf.label | lower | replace(' ', '_') }}": {
            {% for option in display_only_conf.options %}
            "{{ option.label }}": "{{ option.value }}"{% if not loop.last -%}, {%- endif %}
            {%- endfor %}
        },
    {% endfor -%}
    {% endif -%}
    }

{% if parameters is not none -%}
{% for param_conf in parameters -%}
{% if param_conf.type == 'files' and param_conf.file_count == "multiple" %}
{{ param_conf.label | lower | replace(" ", "_") }} = widgets.FileUpload(multiple=True)
{% elif param_conf.type == 'files' and param_conf.file_count == "single" %}
{{ param_conf.label | lower | replace(" ", "_") }} = widgets.FileUpload(multiple=False)
{% elif param_conf.type == 'radio' %}
{{ param_conf.label | lower | replace(" ", "_") }} = widgets.RadioButtons(options=[{% for option in param_conf.options %}("{{ option.label }}", "{{ option.value }}"){% if not loop.last %}, {% endif %}{% endfor %}], value="{{ param_conf.default }}")
{% elif param_conf.type == 'dropdown' %}
{{ param_conf.label | lower | replace(" ", "_") }} = widgets.Dropdown(options=[{% for option in param_conf.options %}("{{ option.label }}", "{{ option.value }}"){% if not loop.last %}, {% endif %}{% endfor %}], value="{{ param_conf.default }}", multiselect = {{ param_conf.multiselect }})
{% elif param_conf.type == 'integer' %}
{{ param_conf.label | lower | replace(" ", "_") }} = widgets.IntText(value={{ param_conf.default }})
{% elif param_conf.type == 'float' %}
{{ param_conf.label | lower | replace(" ", "_") }} = widgets.FloatText(value={{ param_conf.default }})
{% elif param_conf.type == 'textbox' %}
{{ param_conf.label | lower | replace(" ", "_") }} = widgets.Textarea(value="{{ param_conf.default if param_conf.default is not none else '' }}")
{% elif param_conf.type == 'checkbox' %}
{{ param_conf.label | lower | replace(" ", "_") }} = widgets.Checkbox(value={{ param_conf.default }})
{%- endif %}

# Add a description label
{{ "desc_" + param_conf.label | lower | replace(" ", "_") }}  = widgets.HTML(value = "<b>{{ param_conf['label'] }} </b> :  {{ param_conf.get('description', '') }}")

# Add widget and description to accordion
tab = Tab(children=[HBox([widgets.Label("{{ param_conf['label'] }}"), {{ param_conf.label | lower | replace(" ", "_") }}]), {{ "desc_" + param_conf.label | lower | replace(" ", "_") }}])
tab.set_title(0, "{{ param_conf['label'] }}")
tab.set_title(1, "Description")

# Append the corresponding cli_tag, widget to param_vars
{% if param_conf.type == 'files' %}
param_vars.append(("{{ param_conf['cli_tag'] }}", {{ param_conf.label | lower | replace(" ", "_") }}, {{ param_conf.get('cli_order', 0) }}, "{{ param_conf.get('folder_name', '') }}"))
{% elif param_conf.type == 'checkbox' %}
param_vars.append(("{{ param_conf['cli_tag'] }}", {{ param_conf.label | lower | replace(" ", "_") }}, {{ param_conf.get('cli_order', 0) }}, {{ param_conf.get('append_value', False) }} ))
{% else %}
param_vars.append(("{{ param_conf['cli_tag'] }}", {{ param_conf.label | lower | replace(" ", "_") }}, {{ param_conf.get('cli_order', 0) }} ))
{% endif %}

{% if param_conf.mode == 'beginner' -%}
beginner_widgets.append(tab)
{% else %}
advanced_widgets.append(tab)
{%- endif %}
{%- endfor %}
{%- endif %}

{# Parsing display_only section #}
{% if display_only is not none -%}
{% for display_only_conf in display_only -%}
{% if display_only_conf.type == 'files' and display_only_conf.file_count == "multiple" %}
{{ display_only_conf.label | lower | replace(" ", "_") }} = widgets.FileUpload(multiple=True)
{% elif display_only_conf.type == 'files' and display_only_conf.file_count == "single" %}
{{ display_only_conf.label | lower | replace(" ", "_") }} = widgets.FileUpload(multiple=False)
{% elif display_only_conf.type == 'radio' %}
{{ display_only_conf.label | lower | replace(" ", "_") }} = widgets.RadioButtons(options=[{% for option in display_only_conf.options %}("{{ option.label }}", "{{ option.value }}"){% if not loop.last %}, {% endif %}{% endfor %}], value="{{ display_only_conf.default }}", disabled=True)
{% elif display_only_conf.type == 'dropdown' %}
{{ display_only_conf.label | lower | replace(" ", "_") }} = widgets.Dropdown(options=[{% for option in display_only_conf.options %}("{{ option.label }}", "{{ option.value }}"){% if not loop.last %}, {% endif %}{% endfor %}], value="{{ display_only_conf.default }}", multiselect="{{ display_only_conf.multiselect }}", disabled=True)
{% elif display_only_conf.type == 'integer' %}
{{ display_only_conf.label | lower | replace(" ", "_") }} = widgets.IntText(value={{ display_only_conf.default }}, disabled=True)
{% elif display_only_conf.type == 'float' %}
{{ display_only_conf.label | lower | replace(" ", "_") }} = widgets.FloatText(value={{ display_only_conf.default }}, disabled=True)
{% elif display_only_conf.type == 'textbox' %}
{{ display_only_conf.label | lower | replace(" ", "_") }} = widgets.Textarea(value="{{ display_only_conf.default if display_only_conf.default is not none else '' }}", disabled=True)
{% elif display_only_conf.type == 'checkbox' %}
{{ display_only_conf.label | lower | replace(" ", "_") }} = widgets.Checkbox(value={{ display_only_conf.default }}, disabled=True)
{%- endif %}


# Add a description label
{{ "desc_" + display_only_conf.label | lower | replace(" ", "_") }}  = widgets.HTML(value = "<b>{{ display_only_conf['label'] }} </b> :  {{ display_only_conf.get('description', '') }}")

# Add widget and description to accordion
tab = Tab(children=[HBox([widgets.Label("{{ display_only_conf['label'] }}"), {{ display_only_conf.label | lower | replace(" ", "_") }}]), {{ "desc_" + display_only_conf.label | lower | replace(" ", "_") }}])
tab.set_title(0, "{{ display_only_conf['label'] }}")
tab.set_title(1, "Description")

{% if display_only_conf.mode == 'beginner' -%}
beginner_widgets.append(tab)
{% else %}
advanced_widgets.append(tab)
{%- endif %}

{%- endfor %}
{%- endif %}

acc = Accordion()
# Add beginner_widgets to the first section
acc.children = [VBox(beginner_widgets)]
acc.set_title(0, "Beginner's Section")
# Add advanced_widgets to the second section
acc.children = acc.children + [VBox(advanced_widgets),]
acc.set_title(1, "Advanced Section")

def option_to_append(cli_tag, value):
    if cli_tag == "None":
        return None # Ignore the cli_tag and value pair
    elif cli_tag == "":
        return str(value)  # Append only the value
    else:
        if "=" in cli_tag:
            return f"{cli_tag}{value}"  # Append cli_tag and value with "="
        return f"{cli_tag} {value}"  # Append cli_tag and value

def insert_into_jagged_array(jagged_array, cli_order, cli_tag, value):
    # Check the length of Jagged Array and dynamically append with None if required
    while len(jagged_array) <= abs(cli_order):
        jagged_array.append(None)

    # Initialize the sublist if it's not already
    jagged_array[abs(cli_order)] = jagged_array[abs(cli_order)] or []

    # Append the cli_tag and value to the appropriate sublist
    result = option_to_append(cli_tag, value)
    if result is not None: # Only append if the result is not None
        jagged_array[abs(cli_order)].append(result)


def construct_cli_command():
    cli_command = ["{{ exec_function.cli_command }}"]

    # Initialize jagged arrays
    jagged_positive_array = []
    jagged_negative_array = []

    {% autoescape false %}
    hidden_args = {{ exec_function.get("hidden_args", []) }}
    print("Hidden Args:", hidden_args)
    {% endautoescape %}

    if hidden_args:
        for hidden_arg in hidden_args:
            cli_tag = hidden_arg.get('cli_tag', '')
            cli_order = hidden_arg.get('cli_order', 0)
            value = hidden_arg.get('value', '')
            append_value = hidden_arg.get('append_value', False)

            if cli_order < 0:
                while len(jagged_negative_array) <= abs(cli_order):
                    jagged_negative_array.append(None)  # Append None to fill gaps

            while len(jagged_positive_array) <= cli_order:
                jagged_positive_array.append(None)  # Append None to fill gaps

            if isinstance(value, bool): # Special case for boolean values
                if append_value:
                    if cli_order < 0:
                        insert_into_jagged_array(jagged_negative_array, cli_order, cli_tag, value)
                    else:
                        insert_into_jagged_array(jagged_positive_array, cli_order, cli_tag, value)
                else:
                    if value:
                        if cli_order < 0:
                            jagged_negative_array[abs(cli_order)] = jagged_negative_array[abs(cli_order)] or []
                            # Usually, the whole pair is ignored if cli_tag is "None" but since, here we are appending only cli_tag and not value, we need to check for "None" value
                            # Same case are followed for param_vars below (In total, 4 places we are manually checking for "None" value)
                            if cli_tag != "None": # Ignore the cli_tag and value pair if cli_tag is "None"
                                jagged_negative_array[abs(cli_order)].append(cli_tag)
                        else:
                            jagged_positive_array[abs(cli_order)] = jagged_positive_array[abs(cli_order)] or []
                            if cli_tag != "None": # Ignore the cli_tag and value pair if cli_tag is "None"
                                jagged_positive_array[abs(cli_order)].append(cli_tag)

            else: # For all other types except boolean
                if cli_order < 0:
                    insert_into_jagged_array(jagged_negative_array, cli_order, cli_tag, value)
                else:
                    insert_into_jagged_array(jagged_positive_array, cli_order, cli_tag, value)

    for param_var in param_vars:
        cli_tag = param_var[0]
        widget = param_var[1]
        cli_order = param_var[2]

        if len(param_var) == 4:  
            if isinstance(widget, widgets.FileUpload): # This is a 'Files' type
                folder_name = param_var[3]
                value = folder_name
                if cli_order < 0:
                    insert_into_jagged_array(jagged_negative_array, cli_order, cli_tag, value)
                else:
                    insert_into_jagged_array(jagged_positive_array, cli_order, cli_tag, value)
            elif isinstance(widget, widgets.Checkbox):  # This is a 'Checkbox' type
                append_value = param_var[3]
                value = widget.value
                if append_value: # If value needs to appended along with cli_tag - Special case for Checkbox
                    if cli_order < 0:
                        insert_into_jagged_array(jagged_negative_array, cli_order, cli_tag, value)
                    else:
                        insert_into_jagged_array(jagged_positive_array, cli_order, cli_tag, value)
                else: # Otherwise, just append the cli_tag - iff value is True
                    if value:
                        if cli_order < 0:
                            while len(jagged_negative_array) <= abs(cli_order):
                                jagged_negative_array.append(None)
                            jagged_negative_array[abs(cli_order)] = jagged_negative_array[abs(cli_order)] or []
                            if cli_tag != "None":
                                jagged_negative_array[abs(cli_order)].append(cli_tag)
                        else:
                            while len(jagged_positive_array) <= abs(cli_order):
                                jagged_positive_array.append(None)
                            jagged_positive_array[abs(cli_order)] = jagged_positive_array[abs(cli_order)] or []
                            if cli_tag != "None":
                                jagged_positive_array[abs(cli_order)].append(cli_tag)

        else:  # Handling other types then Files and Checkbox
            if isinstance(widget, widgets.RadioButtons):
                value = widget.value
                if value != "None":  # Ensure the value is not "None" (None helps in ignoring the whole cli_tag & value pair)
                    if cli_order < 0:
                        insert_into_jagged_array(jagged_negative_array, cli_order, cli_tag, value)
                    else:
                        insert_into_jagged_array(jagged_positive_array, cli_order, cli_tag, value)
            elif isinstance(widget, widgets.Textarea): 
                value = widget.value
                if value: # None value should be ignored
                    if cli_order < 0:
                        insert_into_jagged_array(jagged_negative_array, cli_order, cli_tag, value)
                    else:
                        insert_into_jagged_array(jagged_positive_array, cli_order, cli_tag, value)
            else:
                value = widget.value
                if cli_order < 0:
                    insert_into_jagged_array(jagged_negative_array, cli_order, cli_tag, value)
                else:
                    insert_into_jagged_array(jagged_positive_array, cli_order, cli_tag, value)


    # Append Positive ordered elements
    for index in range(1, len(jagged_positive_array)):
        if jagged_positive_array[index]:
            cli_command.extend(jagged_positive_array[index])

    # Append elements with cli_order == 0
    if jagged_positive_array and jagged_positive_array[0]:
        cli_command.extend(jagged_positive_array[0])

    # Append Negative ordered elements in reverse order
    for index in range(len(jagged_negative_array) - 1, 0, -1):
        if jagged_negative_array[index]:
            cli_command.extend(jagged_negative_array[index])

    return " ".join(cli_command)

def update_command(change):
    cli_command.value = construct_cli_command()

cli_command = widgets.Textarea(value=construct_cli_command(), description="CLI Command")

for param_var in param_vars:
    widget = param_var[1]
    widget.observe(update_command, names='value')

display(acc, cli_command)

if __name__ == "main":
    print("Hello World")
